// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  password      String?
  email         String?        @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  emailVerified DateTime?
  credits       Int            @default(1000)
  RedeemedCode  RedeemedCode[]
}

model RedeemCode {
  id           Int            @id @default(autoincrement())
  code         String         @unique
  createdAt    DateTime       @default(now())
  value        Int
  RedeemedCode RedeemedCode[]
}

model RedeemedCode {
  id         String   @id @default(cuid())
  userId     String
  redeemedAt DateTime @default(now())

  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  RedeemCode RedeemCode? @relation(fields: [codeId], references: [id])
  codeId     Int

  @@unique([userId, codeId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  access_token      String?
  expiresAt         Int?
  token_type        String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
